{"version":3,"sources":["Submitbttn/index.js","Formular/index.js","ToDoItem/index.js","ToDoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["Submitbttn","id","type","Formular","toDoList","setToDoList","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","toDoTitle","newToDo","Date","now","title","newToDos","addToDo","alert","onSubmit","action","className","name","placeholder","value","onChange","target","ToDoItem","toDo","handleDelete","handleCheck","edit","setEdit","input","setInput","checked","onClick","ToDoList","todoId","parentNode","forEach","todo","index","parseInt","splice","map","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6e7cd07.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nexport default function Submitbttn() {\n  return <button id=\"add\" type=\"submit\">Add</button>;\n}\n","import React, { useState } from \"react\";\nimport Submitbttn from \"../Submitbttn/index.js\";\nimport \"./style.css\";\n\nexport default function Formular({ toDoList, setToDoList }) {\n  let [inputValue, setInputValue] = useState();\n\n  // adds toDo to toDoList, updates toDoList\n  const addToDo = (toDoTitle) => {\n    const newToDo = { id: Date.now(), title: toDoTitle };\n    const newToDos = [...toDoList, newToDo];\n    setToDoList(newToDos);\n  };\n  // Submit-Handler: validates input-value, adds input-value to addToDo, sets input-value to empty string\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    /* is the input field empty? yes. do nothing! */\n    if (!inputValue || inputValue.trim() === \"\") {\n      alert(\"Please type in something you do not want to do.\");\n    } else {\n      addToDo(inputValue);\n    }\n    setInputValue(\"\");\n  };\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)} action=\"\">\n      <p>What are you NOT doing today:</p>\n      <div className=\"inputArea shadow\">\n        <input\n          type=\"text\"\n          name=\"task\"\n          id=\"task\"\n          placeholder=\"your Task\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <Submitbttn />\n      </div>\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function ToDoItem({ toDo, handleDelete, handleCheck }) {\n  const [edit, setEdit] = useState(false);\n  const [input, setInput] = useState();\n  return (\n    <>\n      <li\n        //depending on checked(true/false), li-class changes to \"checked\"\n        className={`${toDo.checked ? \"checked\" : \"\"}`}\n        id={toDo.id}\n        key={toDo.id}\n      >\n        {/* depending on edit(true/false), returns span-element with title when edit=false, returns input-field when edit=true */}\n        {!edit ? (\n          <>\n            {/* Non-Editable List-Item: can be marked as checked by clicking on text-span, edited and deleted */}\n            <span\n              className=\"text\"\n              onClick={(e) => {\n                handleCheck(e);\n              }}\n            >\n              {toDo.title}\n            </span>\n            {/* Edit-Button */}\n            <span\n              className=\"bttn edit\"\n              onClick={() => {\n                setEdit(true);\n                setInput(toDo.title);\n              }}\n            ></span>\n            {/* Delete-Button */}\n            <span\n              className=\"bttn delete\"\n              onClick={(e) => {\n                handleDelete(e);\n              }}\n            ></span>\n          </>\n        ) : (\n          <>\n            {/* Editable List-Item with input-field, confirm- and abort-button */}\n            <input\n              className=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            {/* Confirm-Button: sets todo-Title to value of input-field */}\n            <span\n              className=\"bttn confirm\"\n              onClick={() => {\n                toDo.title = input;\n                setEdit(false);\n              }}\n            ></span>\n            {/* Abort-Button: sets input-field-value to todo-Title */}\n            <span\n              className=\"bttn abort\"\n              onClick={() => {\n                setEdit(false);\n                setInput(toDo.title);\n              }}\n            ></span>\n          </>\n        )}\n      </li>\n    </>\n  );\n}\n","import React from \"react\";\nimport ToDoItem from \"../ToDoItem\";\nimport \"./styles.css\";\n\nexport default function ToDoList({ toDoList, setToDoList }) {\n  //Delete Handler - deleting ToDo-Item of list\n  const handleDelete = (e) => {\n    const todoId = e.target.parentNode.id;\n    toDoList.forEach((todo, index) => {\n      //find index from List\n      if (parseInt(todo.id) === parseInt(todoId)) {\n        toDoList.splice(index, 1);\n      }\n    });\n    setToDoList([...toDoList]);\n  };\n\n  //Check Handler - changes checked-prop to true/false\n  const handleCheck = (e) => {\n    const todoId = e.target.parentNode.id;\n    toDoList.forEach((todo, index) => {\n      if (parseInt(todo.id) === parseInt(todoId)) {\n        toDoList[index].checked = !toDoList[index].checked;\n      }\n    });\n    setToDoList([...toDoList]);\n  };\n  return (\n    <div>\n      <p>Things not to do:</p>\n      <ul id=\"task-list\">\n        {toDoList.map((toDo) => {\n          return (\n            <ToDoItem\n              toDo={toDo}\n              checked={toDo.checked}\n              handleDelete={handleDelete}\n              handleCheck={handleCheck}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport Formular from \"./Formular\";\nimport ToDoList from \"./ToDoList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [toDoList, setToDoList] = useState([\n    // Demo-ToDos\n    { id: \"1\", title: \"Talk about our lord and savior Jesus Christ\" },\n    { id: \"2\", title: \"Deactivate addblocker\" },\n    { id: \"3\", title: \"Accept all cookies\" },\n    { id: \"4\", title: \"Take part in a survey\" },\n    { id: \"5\", title: \"Skip morning coffee\" },\n  ]);\n\n  return (\n    <div className=\"main\">\n      <h1>\n        <span>NOT</span>\n        <span>todo</span>\n        <span>LIST</span>\n      </h1>\n      <ol id=\"instructions\">\n        <li>Write down things not to do.</li>\n        <li>\n          If someone asks you to do said thing, just reply with: \"Sorry, but\n          that's on my Not Todo List.\"\n        </li>\n        <li>\n          If you successfully avoided doing said thing, cross it of your list.\n        </li>\n      </ol>\n      <Formular toDoList={toDoList} setToDoList={setToDoList} />\n      <ToDoList toDoList={toDoList} setToDoList={setToDoList} />\n      <i className=\"license\">\n        icons by fontawesome -{\" \"}\n        <a href=\"https://fontawesome.com/license\">license</a>\n      </i>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}